{"version":3,"sources":["components/states/States.jsx","components/example/Example.jsx","p5.jsx","serviceWorker.js","index.js"],"names":["States","props","console","log","window","cs142models","statesModel","state","states","filteredStates","input","filterStates","bind","event","this","setState","target","value","filter","str","toLowerCase","includes","id","type","onChange","map","React","Component","Example","name","exampleModel","motto","counter","inputValue","buttonWasClicked","handleChangeBound","handleChange","handleChangeMottoBound","handleChangeMotto","timerID","setInterval","Prism","highlightAll","clearInterval","buttonName","option","optionJSX","listItems","i","key","className","htmlFor","href","rel","outOfBandJSX","onClick","e","handleButtonClick","ReactDOM","render","to","path","component","document","getElementById","Boolean","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.32eed025.chunk.js","sourcesContent":["import React from 'react';\nimport './States.css';\n\nclass States extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log('window.cs142models.statesModel()', window.cs142models.statesModel());\n    this.state = {\n      states: window.cs142models.statesModel(),\n      filteredStates: [],\n      input: ''\n    };\n    this.filterStates = this.filterStates.bind(this);\n  }\n\n  filterStates(event) {  \n    this.setState({ input: event.target.value });\n    this.setState({ filteredStates: this.state.states.filter(str => str.toLowerCase().includes(event.target.value)) });\n    if (this.state.states.filter(str => str.toLowerCase().includes(event.target.value)) == false){\n      this.setState({ filteredStates: [\"No matches\"]});\n    }\n  };\n\n  render() {\n    return (\n      <div id=\"filter\">\n        <input type=\"text\" value={this.state.input} onChange={this.filterStates} />\n        {this.state.filteredStates.map(state => <li>{state}</li>)}\n      </div>\n    );\n  }\n}\n\nexport default States;\n","import React from 'react';\nimport './Example.css';\n/*\n  Since this component shows code we include the https://prismjs.com/\n  formatter. We invoke it by labelling code blocks with class=\"language-jsx\"\n*/\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-jsx.js';\n// import '../../node_modules/prismjs/themes/prism.css';\n\n/* eslint-disable  react/jsx-one-expression-per-line */\n/* eslint-disable  react/destructuring-assignment */\n/* eslint no-plusplus: [\"error\", { \"allowForLoopAfterthoughts\": true }] */\n\n// React Components are subclass of React.Componment.\nclass Example extends React.Component {\n  constructor(props) {\n    super(props); // Must run the constructor of React.Component first\n\n    // Components have a special property named \"state\" that holds state.\n    // We can initialize it here.\n    // We read the example model data into the state variable 'name'\n    this.state = {\n      name: window.cs142models.exampleModel().name,\n      motto: window.cs142models.exampleModel().motto,\n      counter: 0,\n      inputValue: '',\n      buttonWasClicked: '',\n    };\n\n    // React events are called directly from DOM event handlers\n    // so we cannot directly call the methods of this class. We\n    // generate new functions that handle the event by just calling\n    // the method that handles the event.\n    this.handleChangeBound = event => this.handleChange(event);\n    this.handleChangeMottoBound = event => this.handleChangeMotto(event);\n    // Note: A commmon idiom in React code is to use JavaScript bind() to\n    // smash the method to accomplish this passthrough to the method:\n    //      this.handleChange = this.handleChange.bind(this);\n  }\n\n  // React components have several \"lifecycle functions\"\n  // https://reactjs.org/docs/react-component.html\n  // that are used to inform the Component of interesting events.\n\n  // componentDidMount - Called when Component is activiated\n  componentDidMount() {\n    // To demonstate state updating we define a function\n    // that increments the counter state and instruct the\n    // DOM to call it every 2 seconds.\n    /* eslint-disable react/no-access-state-in-setstate */\n    const counterIncrFunc = () => this.setState({\n      counter: this.state.counter + 1,\n    });\n    this.timerID = setInterval(counterIncrFunc, 2 * 1000);\n\n    // Trigger the code coloring\n    Prism.highlightAll();\n  }\n\n  // componentWillUnmount - Called when Component is deactivated.\n  componentWillUnmount() {\n    // We need to tell the DOM to stop calling us otherwise React\n    // will complain when we call setState on an unmounted component.\n    clearInterval(this.timerID);\n  }\n\n  // Method called when the input box is typed into.\n  handleChange(event) {\n    this.setState({ inputValue: event.target.value });\n  }\n\n  handleChangeMotto(event) {\n    this.setState({ motto: event.target.value });\n  }\n\n  // Method called when the button is pushed\n  /* eslint-disable-next-line no-unused-vars */\n  handleButtonClick(buttonName, event) {\n    this.setState({ buttonWasClicked: buttonName });\n  }\n\n  /* eslint-disable-next-line class-methods-use-this */\n  outOfBandJSX(option) {\n    let optionJSX;\n    const listItems = [];\n    if (option) {\n      optionJSX = <div>Option was True</div>;\n    } else {\n      optionJSX = <div>Option was False</div>;\n    }\n    for (let i = 0; i < 3; i++) {\n      listItems[i] = <li key={i}> List Item {i} </li>;\n    }\n    const retVal = (\n      <div>\n        {optionJSX}\n        <ul>{listItems}</ul>\n      </div>\n    );\n\n    return retVal;\n  }\n\n  render() {\n    return (\n      <div className=\"container Example\">\n        \n        <h1>CS142 Project#4 React.js Example</h1>\n\n        <div className=\"motto-update\">\n          {this.state.name + \", \" + this.state.motto}    \n          \n          {/*Allow the user to update the motto being displayed. \n          The default value should continue to be retrieved from the model data.*/}\n        </div>\n\n        <label htmlFor=\"mottoChange\">Change the motto: </label>\n      {/*this.state.motto = \"Test\"*/}\n        <input id=\"mottoChange\" type=\"text\" value={this.state.motto} onChange={this.handleChangeMottoBound} />\n\n\n{/* <div className=\"cs142-example-output\">\n          <label htmlFor=\"inId\">Input Field:\n          </label>\n          <input id=\"inId\" type=\"text\" value={this.state.inputValue} onChange={this.handleChangeBound} />\n        </div>*/}\n\n        <p>\n          This view is an example of a\n          &nbsp;\n          <a href=\"https://reactjs.org/docs/react-component.html\" target=\"_blank\" rel=\"noopener noreferrer\">\n            React.js Component\n          </a>\n          &nbsp;\n          named <span className=\"cs142-code-name\">Example</span>.\n          It is located in the\n          file <code>components/example/Example.jsx</code>.\n          It looks like a JavaScript class named Example that has a method named\n          named <span className=\"cs142-code-name\">render</span>, which\n          appears to written in something that looks like HTML.\n        </p>\n        <p>\n          It is actually written in a language named &nbsp;\n          <a href=\"https://reactjs.org/docs/introducing-jsx.html\" target=\"_blank\" rel=\"noopener noreferrer\">\n            JSX\n          </a>\n          &nbsp; that is run as a preprocessor to the HTML-like\n          language to JavaScript. The generated JavaScipt is limited to calls\n          to the React.js &nbsp;\n          <a href=\"https://reactjs.org/docs/react-api.html#createelement\" target=\"_blank\" rel=\"noopener noreferrer\">\n            createElement\n          </a>\n          &nbsp; function which allow us to write something that looks\n          like HTML to describe what the component renders.\n        </p>\n        <p>\n          Although JSX looks like HTML, it is not HTML. Some of the differences\n          are necessary due to embeddding\n          in JavaScript. For example, rather than <code>class=</code> we\n          use <code>className=</code> (class is a JavsScript keyword).\n          Although it is possible to interleave JavaScript and JSX code, care is\n          needed since contents of JSX tags are processed into arguments to a\n          function limiting what can be done as will be seen below.\n        </p>\n\n        <h3>Template substitution</h3>\n\n        <p>\n          JSX treats text inside of parentheses (e.g. <code>{'{JavaScriptExpression}'}</code>) as\n          templates where the JavaScript expression is evaluated in the context of the current\n          function and whose value replaces the template in the string. The expression\n          can evaluate to a JavaScript string or value from a JSX expression. This feature allows\n          componment&apos;s specification to use templated HTML.\n        </p>\n\n        <p>\n          The Example class constructor sets the object&apos;s\n          property <code>state.name</code> (see the assignment\n          to <code>this.state.name</code> in <code>Example.jsx</code>)\n          from the model in the DOM which has a value of &ldquo; {this.state.name}\n          &rdquo; so:\n        </p>\n        <pre className=\"cs142-example-code\">\n          <code className=\"language-jsx\">\n            {\n`<p>My name is \"{this.state.name}\".</p>`\n            }\n          </code>\n        </pre>\n        <p>\n          should render as:\n        </p>\n        <p className=\"cs142-example-output\">\n          My name is &ldquo; {this.state.name} &rdquo;.\n        </p>\n\n        <h3>\n          One-way binding from JavaScript to HTML\n        </h3>\n\n        <p>\n          React automatically propagates any changes to JavaScript state to the\n          JSX templates. For example\n          the following code <code>({'{this.state.counter}'})</code> displays\n          the state.counter property of the Example component.\n          The component sets a timer\n          that increments the counter every 2 seconds. The value of the\n          counter can be seen changing here: {this.state.counter}.\n        </p>\n\n        <h3>Control flow</h3>\n        <p>\n          Most templating engines include support for doing conditional\n          rendering and iteration. JSX is embedded in and is transpiled to\n          JavaScript so we can use JavaScript language constructs for managing control flow.\n        </p>\n        <p>\n          One way of doing control using JavaScript is to assign JSX fragements\n          to JavaScript variables and use normal JavaScript control flow\n          operators. For example, the following function selects among the\n          posssible output lines based on an argument to the function and\n          uses a for loop to populate an array. These JavaScript variables\n          can then be referred to in JSX returned by the function.\n        </p>\n        <pre className=\"cs142-example-code\">\n          <code className=\"language-jsx\">\n            {\n`function outOfBandJSX(option) {\n  var optionJSX;\n  if (option) {\n    optionJSX = <div>Option was True</div>;\n  } else {\n    optionJSX  = <div>Option was False</div>;\n  }\n  var listItems = [];\n  for (var i = 0; i < 3; i++) {\n    listItems[i] = <li key={i}>List Item {i}</li>;\n  }\n  var retVal =\n    <div>\n      {optionJSX}\n      <ul>\n        {listItems}\n      </ul>\n    </div>;\n\n  return retVal;\n}`\n            }\n          </code>\n        </pre>\n        <p>\n            Calling this function from a template\n            (i.e. <code>{'{this.outOfBandJSX(true)}'}</code>)\n            would be expand to:\n        </p>\n        <div className=\"cs142-example-output\">{this.outOfBandJSX(true)}</div>\n        <p>\n            Another way of accomplishing this is embedding the operations inside\n            of curly braces. Although arbitrary JavaScript can appear inside\n            braces, it must return a string or JSX expression to work.\n            JavaScript control flow operations such as if, for, and while do\n            not return values so templates\n            like <code>{'{if (bool) ... else ...}'}</code> do not work.\n        </p>\n        <p>\n            The following code generates the above output using the\n            JavaScript {'\"?:\"'} operator and functional-style programming\n            support to always return a value in the template:\n        </p>\n        <pre className=\"cs142-example-code\">\n          <code className=\"language-jsx\">\n            {\n`<div>\n  option ? <div>Option was True</div> : <div>Option was False</div> }\n  <ul>\n    {[0,1,2].map((i) =>  <li key={i}>List Item {i}</li>)}\n  </ul>\n</div>`\n            }\n          </code>\n        </pre>\n        <p>\n          Short-circuit boolean operations such as {'\"&&\"'} can\n          also be used to control what is rendered. For example the following\n          code will make a sentence appear between to two paragraph when some\n          characters are typed into the input box below.\n        </p>\n        <pre className=\"cs142-example-code\">\n          <code className=\"language-jsx\">\n            {\n`<div>\n  <p>A paragraph will appear between this paragraph</p>\n  {\n    this.state.inputValue && (\n      <p>This text will appear when this.state.inputValue is truthy.\n        this.state.inputValue === {this.state.inputValue}\n      </p>\n    )\n  }\n  <p>... and this one when some characters are typed into the input box below.</p>\n</div>\n`\n            }\n          </code>\n        </pre>\n        <p>\n          Generates the output:\n        </p>\n        <div className=\"cs142-example-output\">\n          <p>\n            A paragraph will appear between this paragraph\n          </p>\n          {\n            this.state.inputValue\n            && (\n              <p>\n                This text will appear when this.state.inputValue is truthy.\n                this.state.inputValue === {this.state.inputValue}\n              </p>\n            )\n          }\n          <p>\n            ... and this one when some characters are typed into the below box.\n          </p>\n        </div>\n\n        <h3>Input using DOM-like handlers</h3>\n        <p>\n          Input in React is done using DOM-like event handlers. For example, JSX statements like:\n        </p>\n        <pre className=\"cs142-example-code\">\n          <code className=\"language-jsx\">\n            {\n`<label htmlFor=\"inId\">Input Field: </label>\n<input type=\"text\" value={this.state.inputValue} onChange={this.handleChangeBound} />`\n            }\n          </code>\n        </pre>\n        <p>\n          will display the text from the inputValue property of the\n          Component&apos;s state in the input box (it starts\n          out blank) and calls the function this.handleChangedBound every time the\n          input field is changed.\n          Typically this kind of input will\n          be associated with\n          a <a href=\"https://reactjs.org/docs/handling-events.html\">Button</a> or\n          inside a <a href=\"https://reactjs.org/docs/forms.html\">Form</a> to allow\n          the user to signal when they are finished changing the input field.\n          Note the differences from HTML\n          in <code>onchange=</code> become <code>onChange=</code> and\n          <code>for=</code> becoming <code>htmlFor=</code>.\n        </p>\n\n        {\n        /* eslint-disable jsx-a11y/label-has-associated-control */\n        /* eslint-disable jsx-a11y/label-has-for */\n        }\n        <div className=\"cs142-example-output\">\n          <label htmlFor=\"inId\">Input Field:\n          </label>\n          <input id=\"inId\" type=\"text\" value={this.state.inputValue} onChange={this.handleChangeBound} />\n        </div>\n        <p>\n          The handleChangeBound function updates this.state.inputValue with the\n          value of the DOM element so its value\n          can be access like <code>{'{this.state.inputValue}'}</code> which\n          returns &nbsp;&ldquo; {this.state.inputValue}  &rdquo;. Note we can not directly\n          call <code>this.handleChange</code> since it is a method function of an object\n          that is not available to the DOM. To handle this we create a new\n          function <code>this.handleChangeBound</code> that can call the method and use it here.\n        </p>\n        <p>\n          If we want to pass arguments to event handling functions we can use inlined\n          arrow function definitions like so:\n        </p>\n        <pre className=\"cs142-example-code\">\n          <code className=\"language-jsx\">\n            {\n`<div className=\"cs142-example-output\">\n  <p>Test button clicks.\n    {\n      this.state.buttonWasClicked &&\n      <span>Last button clicked was: {this.state.buttonWasClicked}</span>\n    }\n  </p>\n  <button\n    type=\"button\"\n    onClick={e => this.handleButtonClick(\"one\", e)}\n  >\n    Call handleButtonClick function with one\n  </button>\n  <button\n    type=\"button\"\n    onClick={e => this.handleButtonClick(\"two\", e)}\n  >\n    Call handleButtonClick function with two\n  </button>\n</div>`\n            }\n          </code>\n        </pre>\n        <p>\n          When the button is pushed it will call the arrow function, which will then call the\n          method <code>handleButtonClick</code> with the specified argument.\n        </p>\n        <div className=\"cs142-example-output\">\n          <p>\n            Test button clicks. {\n              this.state.buttonWasClicked\n              && <span>Last button clicked was: {this.state.buttonWasClicked}</span>\n            }\n          </p>\n          <button type=\"button\" onClick={e => this.handleButtonClick('one', e)}>\n            Call handleButtonClick function with one\n          </button>\n          <button type=\"button\" onClick={e => this.handleButtonClick('two', e)}>\n            Call handleButtonClick function with two\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Example;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter, Route, Link } from \"react-router-dom\";\n\nimport States from './components/states/States';\nimport Example from './components/example/Example';\n\nimport './p5.css';\n\nReactDOM.render(\n\t<HashRouter>\n\t\t<div>\n\t\t\t{/*<Route path=\"/\" component={Switch} />*/}\n\t\t\t<p id=\"nav\">\n\t\t\t\t<Link to=\"/states\">STATES</Link>\n\t\t\t\t<span id=\"navSpacer\"> </span>\n\t\t\t\t<Link to=\"/Example\">EXAMPLE</Link>\n\t\t\t</p>\n\t\t\t<Route path=\"/states\" component={States} />\n\t\t\t<Route path=\"/example\" component={Example} />\n\t\t</div>\n\t</HashRouter>,\n  document.getElementById('reactapp'),\n);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport p5 from './p5';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<p5 />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}